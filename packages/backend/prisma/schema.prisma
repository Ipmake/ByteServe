// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // Note: This URL is required by Prisma but will be ignored when using the adapter
    url      = env("DATABASE_URL")
}

enum ConfigType {
    STRING
    NUMBER
    BOOLEAN
    SELECT
}

model Config {
    key           String     @id @db.VarChar(64)
    value         String     @db.VarChar(256)
    category      String     @default("general") @db.VarChar(64)
    description   String?    @db.VarChar(512)
    type          ConfigType
    selectOptions String[]   @default([]) @db.VarChar(256) // When type is not SELECT, this will be auto suggestions
}

model User {
    id       String @id @default(uuid())
    username String @unique @db.VarChar(32)
    password String @db.VarChar(256)

    enabled      Boolean @default(true)
    isAdmin      Boolean @default(false)
    storageQuota BigInt  @default(-1) // -1 means unlimited, otherwise in bytes

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    AuthTokens       AuthTokens[]
    Bucket           Bucket[]
    WebDAVCredential WebDAVCredential[]
    S3Credential     S3Credential[]
}

model AuthTokens {
    id          String   @id @default(uuid())
    userId      String
    description String   @db.VarChar(128)
    token       String   @unique @db.VarChar(256)
    expiresAt   DateTime
    createdAt   DateTime @default(now())

    isApi Boolean @default(false) // Indicates if the token is for API access (disallows web login)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bucket {
    id           String   @id @default(uuid())
    name         String   @unique @db.VarChar(64)
    access       String   @default("private") @db.VarChar(32) // private, public-read, public-write
    storageQuota BigInt   @default(-1) // -1 means unlimited, otherwise in bytes
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    ownerId String

    owner          User                 @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    entries        Object[]
    webdavAccess   WebDAVBucketAccess[]
    S3BucketAccess S3BucketAccess[]
    BucketConfig   BucketConfig[]
}

model BucketConfig {
    bucketId String
    key      String @db.VarChar(64)
    value    String @db.VarChar(256)

    type ConfigType @default(STRING)

    bucket Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

    @@id([bucketId, key])
}

model Object {
    id        String   @id @default(uuid())
    bucketId  String
    filename  String   @db.VarChar(512)
    size      BigInt
    mimeType  String   @db.VarChar(128) // e.g., image/png, application/pdf or folder for folders
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    parentId String?
    children Object[] @relation("ObjectToChildren")
    parent   Object?  @relation("ObjectToChildren", fields: [parentId], references: [id], onDelete: Cascade)

    bucket Bucket @relation(fields: [bucketId], references: [id], onDelete: Cascade)

    @@unique([bucketId, parentId, filename])
}

model ScheduleTask {
    id          String    @id @unique @db.VarChar(32)
    displayName String
    enabled     Boolean   @default(true)
    cron        String
    lastRun     DateTime?
}

model WebDAVCredential {
    id        String   @id @default(uuid())
    userId    String
    username  String   @unique @db.VarChar(64) // Format: username-dav-XXXX
    password  String   @db.VarChar(64) // Plain text, auto-generated
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    bucketAccess WebDAVBucketAccess[]
}

model WebDAVBucketAccess {
    id           String @id @default(uuid())
    credentialId String
    bucketId     String

    credential WebDAVCredential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    bucket     Bucket           @relation(fields: [bucketId], references: [id], onDelete: Cascade)

    @@unique([credentialId, bucketId])
}

model S3Credential {
    id        String   @id @default(uuid())
    userId    String
    accessKey String   @unique @db.VarChar(20)
    secretKey String   @db.VarChar(40)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    bucketAccess S3BucketAccess[]
}

model S3BucketAccess {
    id           String @id @default(uuid())
    credentialId String
    bucketId     String

    credential S3Credential @relation(fields: [credentialId], references: [id], onDelete: Cascade)
    bucket     Bucket       @relation(fields: [bucketId], references: [id], onDelete: Cascade)

    @@unique([credentialId, bucketId])
}
